/**
 * User Ïóê ÎåÄÌïú Model ÏûÖÎãàÎã§.
 *
 * @author InsungSong, Inc.
 * @packageDocumentation
 * @module server.models.User.resolvers
 * @preferred
 */

import { STORES } from "../../../stores";
import { Resolver, Query, Mutation, Arg } from "type-graphql";
import { StoresEntity } from "../entities/Stores.entity";
import { CreateStroesDataInput } from "../inputs/CreateStroesData.input";
import {
  axiosPostCodeSearchProcessing,
  isStoresProcessing
} from "../services/stores.service";
import {
  RegionMergeListObject,
  ResultObject,
  StoresObject
} from "../objects/Stores.object";
import axios from "axios";
import { StoreWhereInput } from "../inputs/StoreWhere.input";
import { PostcodesWhereInput } from "../inputs/PostcodesWhere.input";
/**
 * StoresÏôÄ Í¥ÄÎ†®Îêú ÏöîÏ≤≠ÏùÑ Ï≤òÎ¶¨Ìï©ÎãàÎã§.
 *
 * @author InsungSong, Inc.
 */

enum REGION {
  NORTH = "North",
  NORTH_WEST = "North West",
  WEST = "West",
  WEST_SOUTH = "West South",
  SOUTH = "South",
  SOUTH_EAST = "South East",
  EAST = "East",
  EAST_NORTH = "East North"
}

@Resolver()
export class StoresResolver {
  //üìåStores.jsonÏóê Ìï¥Îãπ ÌïòÎäî ÏΩîÎìúÎ•º Ï†ÄÏû•Ìï¥ÏïºÌï©ÎãàÎã§.
  //1. Ìï¥Îãπ ÏΩîÎìúÎäî props Î∂ÄÎ∂ÑÏúºÎ°ú Ï†ÄÏû•ÌïòÍ≥†Ïûê ÌïòÎäî stores.jsonÌååÏùºÏùÑ ÎÑòÍ∏¥Îã§Í≥† ÌñàÏùÑÎïå Ïã§ÌñâÎêú apiÏûÖÎãàÎã§.
  @Mutation(() => Boolean)
  async createInputPropsStores(@Arg("data") data: CreateStroesDataInput) {
    try {
      const storesDataList = data.storesData;

      storesDataList.map(async (item, index) => {
        //Ìï¥Îãπ dataÍ∞Ä DBÏÉÅÏóê Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî dataÎùºÎ©¥ Ï†ÄÏû•ÌïòÏßÄ ÏïäÍ∏∞ ÏúÑÌïú ÏΩîÎìú
        // const isStores = await StoresEntity.createQueryBuilder("stores")
        //   .where("stores.name = :name AND stores.postcode = :postcode", {
        //     name: item.name,
        //     postcode: item.postcode
        //   })
        //   .getOne();

        await isStoresProcessing({
          name: item.name,
          postcode: item.postcode
        });
      });

      return true;
    } catch (e) {
      console.log("createStoresMutation Error: ", e);
      return false;
    }
  }

  //2. Ìï¥Îãπ ÏΩîÎìúÎäî propsÎ°ú Ï†ÄÏû•ÌïòÏßÄ ÏïäÍ≥† stores.jsonÌååÏùº Î≥ÄÏàòÎ•º Î∞õÏïÑÏÑú Î∞∞Ïó¥ ÏûêÏ≤¥Î•º Î≥¥Í≥† Ïã§ÌñâÌïòÎäî apiÏûÖÎãàÎã§.
  @Mutation(() => Boolean)
  async createStores() {
    try {
      const result = STORES.map(async (item) => {
        // Ìï¥Îãπ dataÍ∞Ä DBÏÉÅÏóê Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî dataÎùºÎ©¥ Ï†ÄÏû•ÌïòÏßÄ ÏïäÍ∏∞ ÏúÑÌïú ÏΩîÎìú
        await isStoresProcessing({
          name: item.name,
          postcode: item.postcode
        });
      });

      await Promise.all(result);

      return true;
    } catch (e) {
      console.log("createStoresMutation Error: ", e);
      return false;
    }
  }

  //üìåStores.jsonÏóêÏÑú ÏÉÅÏ†ê Î™©Î°ùÏùÑ ÏñªÏùÑ Ïàò ÏûàÏäµÎãàÎã§.
  //üìåStores.jsonÏóêÏÑú ÏÉÅÏ†êÏùò ÌäπÏ†ï Ìï≠Î™©ÏùÑ Í∞ÄÏ†∏Ïò¨ Ïàò ÏûàÏäµÎãàÎã§.
  @Query(() => [StoresObject])
  async storesList() {
    try {
      const storesDataList = await StoresEntity.createQueryBuilder(
        "stores"
      ).getMany();

      return storesDataList;
    } catch (e) {
      console.log("stores Error: ", e);
      return null;
    }
  }

  //üìåAPI ÏÜåÎπÑÏûêÎäî Stores.jsonÏùò Ïù¥Î¶ÑÏúºÎ°ú Ìï≠Î™©ÏùÑ ÏãùÎ≥ÑÌï† Ïàò ÏûàÏäµÎãàÎã§.
  @Query(() => StoresObject)
  async store(@Arg("where") where: StoreWhereInput) {
    try {
      const { name } = where;

      const currentStore = await StoresEntity.createQueryBuilder("stores")
        .where("stores.name = :name", { name })
        .getOne();

      return currentStore;
    } catch (e) {
      console.log("store Error: ", e);
      return null;
    }
  }

  //Ìï¥Îãπ Î∂ÄÎ∂ÑÏùÄ ÌÖåÏä§Ìä∏Î•º ÏßÑÌñâÌï¥ÏïºÌï®
  //üìåÍ∞Å Ïö∞Ìé∏ Î≤àÌò∏Ïóê ÎåÄÌïú ÏúÑÎèÑÏôÄ Í≤ΩÎèÑÎ•º ÏñªÏùÑ Ïàò ÏûàÏäµÎãàÎã§.(postcodes.ioÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Í∞Å Ïö∞Ìé∏Î≤àÌò∏Ïùò ÏúÑÎèÑÏôÄ Í≤ΩÎèÑÎ•º ÏñªÏùÑ Ïàò ÏûàÏäµÎãàÎã§.)
  @Query(() => ResultObject)
  async moreInfoStore(@Arg("where") where: PostcodesWhereInput) {
    const { postcode } = where;
    try {
      const resultData = await axiosPostCodeSearchProcessing({
        method: "get",
        postcode,
        url: "https://postcodes.io/postcodes/"
      });

      return resultData;
    } catch (e) {
      console.log("moreInfoStore Error:", e);
      return null;
    }
  }

  //üìåÏòÅÍµ≠ÏóêÏÑú Ï£ºÏñ¥ÏßÑ Ïö∞Ìé∏Î≤àÌò∏Ïùò Ï£ºÏñ¥ÏßÑ Î∞òÍ≤ΩÏóê ÏûàÎäî ÏÉÅÏ†ê Î™©Î°ùÏùÑ Î∞òÌôòÌï† Ïàò ÏûàÎäî Í∏∞Îä•ÏùÑ ÏñªÏùÑ Ïàò ÏûàÏäµÎãàÎã§. (Î™©Î°ùÏùÄ Î∂ÅÏ™ΩÏóêÏÑú ÎÇ®Ï™ΩÏúºÎ°ú Ï†ïÎ†¨ÎêòÏñ¥Ïïº Ìï©ÎãàÎã§.)
  @Query(() => [RegionMergeListObject])
  async radiusPostcodeList(@Arg("where") where: PostcodesWhereInput) {
    //Í≤ΩÎèÑÏôÄ ÏúÑÎèÑÏùò Í≤ΩÏö∞ÏóêÎäî UXÏ†ÅÏúºÎ°ú Ï∞æÍ≤å ÌïòÎäîÍ≤ÉÎèÑ, ÏûÖÎ†•ÌïòÍ≤å ÌïòÎäîÍ≤ÉÎèÑ Ï¢ãÏßÄ ÏïäÏùÑ Í≤ÉÏúºÎ°ú ÌåêÎã®ÌïòÏó¨ Î∞ëÏùò lineÏóêÏÑú Ìï¥Í≤∞Ìï©ÎãàÎã§.
    //PostcodesWhereInput propsÎ•º ÌÜµÌï¥ÏÑú Î∞õÏùÑ Ïàò ÏûàÎäî Î≥ÄÏàòÎ•º 3Í∞úÎ°ú Ï†ïÌñàÏäµÎãàÎã§.
    //postcode : ÌïÑÏàòÍ∞íÏûÖÎãàÎã§. -> Ï£ºÎ≥Ä Í≤ÄÏÉâÏóê Ï§ëÏã¨Ïù¥ ÎêòÎäî ÌïµÏã¨ propÏù¥Í∏∞ÎïåÎ¨∏ÏûÖÎãàÎã§.
    //radius: Î∞òÍ≤ΩÎ≤îÏúÑÎäî ÏÑ†ÌÉùÍ∞íÏúºÎ°ú ÌñàÏúºÎ©∞ ÏûÖÎ†•ÌïòÏßÄ ÏïäÏùÑÍ≤ΩÏö∞ defaultValue: postcode.ioÏóê ÎÇòÏôÄÏûàÎäî Í∞íÏù∏ 1000ÏúºÎ°ú ÏßÄÏ†ïÌñàÏäµÎãàÎã§.
    //limit : ÎÇòÏò¨Ïàò ÏûàÎäî Î∞òÍ≤ΩÎ≤îÏúÑ ÏïàÏóê ÏûàÎäî ÏÉÅÏ†êÏùò Ïàò ÎòêÌïú ÏÑ†ÌÉùÍ∞íÏúºÎ°ú ÏßÄÏ†ïÌñàÏäµÎãàÎã§. ÏÑ†ÌÉùÌïòÏßÄ ÏïäÏùÑ Í≤ΩÏö∞ postcode.ioÏóê ÎÇòÏôÄÏûàÎäî Í∞íÏù∏ 5Î°ú ÏßÄÏ†ïÌñàÏäµÎãàÎã§.

    const { postcode, radius, limit } = where;

    try {
      const resultData = await axiosPostCodeSearchProcessing({
        method: "get",
        postcode,
        url: "https://postcodes.io/postcodes/"
      });

      //client Î∂ÄÌÑ∞ Î∞õÏïÑÏò® propsÏù∏ postcodeÎ•º ÌÜµÌïòÏó¨ Ìï¥ÎãπÌïòÎäî postcodeÏùò longitude,latitudeÎ•º Î∞õÏïÑÏò®Îã§.
      const longitude = resultData?.result?.longitude;
      const latitude = resultData?.result?.latitude;

      //currentLongitude, currentLatitudeÎ•º Í∞ÄÏßÄÍ≥† Ïú†Ï†ÄÍ∞Ä Î≥¥ÎÇ¥Îäî radius || (null = 1000 defaultValue)Î•º ÌÜµÌïòÏó¨ Ìï¥Îãπ ÌïòÎäî Î∞òÍ≤ΩÏùò ÏÉÅÏ†êÏùÑ Ï∞æÎäîÎã§.
      const geolocationsResult = await axios({
        method: "post",
        url: `https://postcodes.io/postcodes`,
        data: {
          geolocations: [
            {
              longitude,
              latitude,
              radius: !radius ? 1000 : radius,
              limit: !limit ? 5 : limit
            }
          ]
        }
      }).then(function (response) {
        return response?.data;
      });

      //postcode.ioÎ°úÎ∂ÄÌÑ∞ Î∞õÏïÑÏò® Î∂Å -> ÎÇ®ÏúºÎ°ú Ï†ïÎ¶¨ÎêòÏßÄ ÏïäÏùÄ Î∞∞Ïó¥ÏùÑ Îã¥ÏùÄ Î≥ÄÏàò
      const unorganizedSearchresultData = geolocationsResult?.result;

      //north : Î∂Å / south : ÎÇ® / east : Îèô / west : ÏÑú
      const northList = [];
      const northWestList = [];
      const westList = [];
      const westSouthList = [];
      const southList = [];
      const southEastList = [];
      const eastListList = [];
      const eastNorthList = [];
      const dummyRegionList = []; //ÏÉùÍ∞ÅÌïú Î≥ÄÏàò (Î∂Å -> Î∂Å ÏÑú -> ÏÑú .... ÏôÄ Í∞ôÏùÄ Í≤ΩÏö∞Í∞Ä ÏïÑÎãå Í≤ΩÏö∞Í∞Ä ÌòπÏãú Îì§Ïñ¥Ïò¨ ÏÉÅÌô©ÏùÑ ÎåÄÎπÑÌï¥ÏÑú ÎßåÎì† Î≥ÄÏàò)

      const filteringSearchResultProcessing = unorganizedSearchresultData?.map(
        (item) => {
          item?.result?.map((depthItem) => {
            const depthItemRegion = depthItem?.region;

            if (depthItemRegion === REGION.NORTH) {
              northList.push(depthItem);
            } else if (depthItemRegion === REGION.NORTH_WEST) {
              northWestList.push(depthItem);
            } else if (depthItemRegion === REGION.WEST) {
              westList.push(depthItem);
            } else if (depthItemRegion === REGION.WEST_SOUTH) {
              westSouthList.push(depthItem);
            } else if (depthItemRegion === REGION.SOUTH) {
              southList.push(depthItem);
            } else if (depthItemRegion === REGION.SOUTH_EAST) {
              southEastList.push(depthItem);
            } else if (depthItemRegion === REGION.EAST) {
              eastListList.push(depthItem);
            } else if (depthItemRegion === REGION.EAST_NORTH) {
              eastNorthList.push(depthItem);
            } else {
              dummyRegionList.push(depthItem);
            }
          });
        }
      );

      Promise.all(filteringSearchResultProcessing);

      //filteringSearchResultProcessing funcÏùÑ Í±∞ÏπòÍ≥† ÎÇúÌõÑ Ìï¥Îãπ region Ï†ïÎ≥¥Î•º Îã¥ÏùÄ Ìï®ÏàòÎì§ÏùÑ Ìï©ÏπòÎäî Î≥ÄÏàò
      const regionMergeList = [
        ...northList,
        ...northWestList,
        ...westList,
        ...westSouthList,
        ...southList,
        ...southEastList,
        ...eastListList,
        ...eastNorthList,
        ...dummyRegionList
      ];

      console.log("regionMergeList: ", regionMergeList);

      return regionMergeList;
    } catch (e) {
      console.log("radiusPostcodeList Error :", e);
      return null;
    }
  }
}
